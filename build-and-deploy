#!/usr/local/bin/ruby
require 'json'

def describe_instance
  resp = JSON.parse(`aws ec2 describe-instances --instance-ids i-4b79b7cb`)
  resp["Reservations"][0]["Instances"][0]
end

def start_build_server
  i  = describe_instance
  until i["State"]["Name"] == "stopped"
    sleep 5
    i = describe_instance
  end
  `aws ec2 start-instances --instance-ids i-4b79b7cb`
  until i["State"]["Name"] == "running"
    sleep 5
    i = describe_instance
  end
end

def stop_build_server
  `aws ec2 stop-instances --instance-ids i-4b79b7cb`
end

def build(target = 'staging')
  `git archive head -o cloudkarafka-mgmt.tar --format=tar`
  i = JSON.parse(`aws ec2 describe-instances --instance-ids i-4b79b7cb`)
  hostname = i["Reservations"][0]["Instances"][0]["PublicDnsName"]
  until system("scp cloudkarafka-mgmt.tar ubuntu@#{hostname}:")
    sleep 1
  end
  until system("ssh ubuntu@#{hostname} << EOF
    tar -xf cloudkarafka-mgmt.tar -C /home/ubuntu/go/src/cloudkarafka-mgmt
    cd /home/ubuntu/go/src/cloudkarafka-mgmt
    go build -tags static
    rm -rf target
    mkdir target
    mv cloudkarafka-mgmt target/cloudkarafka-mgmt.linux
    cp -r static target/static
    tar -czf cloudkarafka-mgmt.tar.gz target
    aws s3 cp cloudkarafka-mgmt.tar.gz s3://cloudkafka-manager/#{target}/cloudkarafka-mgmt.tar.gz --region us-east-1
EOF")
    sleep 1
  end
end

def usage
  puts "accepted arguments staging/production"
end

begin
  if ARGV[0] == 'help'
    usage
  else
    puts "starting build server"
    start_build_server
    puts "build server started"
    build(ARGV[0])
    puts "Successfully built and deploy a new version"
  end
ensure
  stop_build_server
end
